CARDIAC VISUALISATION TECHNIQUES

Here you will find code, data and examples related to the talk. PLEASE say, send us a modification, or submit a pull request via GitHub if you see anything wrong, out of date, or that just needs improving, testing or refactoring. Please also submit extra tools you have that you think other people would find useful, preferably with a test or two to boot!

SETUP AND DEPENDENCIES:
Many of the dependencies are optional. Often the easiest way to install is to use your favourite package manager e.g. aptitude, yum, MacPorts. Alternatively, download the source from the websites and follow the instructions for installation.

This code can be downloaded in zip or tar format from github.com/mattgibb/visualisation, but if you would like to keep up to date with the latest version easily, or to contribute a patch or extra tools and materials, you will need to install git (http://git-scm.com/). Just change into a suitable directory and type:

git clone git://github.com/mattgibb/visualisation.git

This will make a directory in your current directory called 'visualisation' containing the project. To update to the latest version, just change into the 'visualisation' directory and type:

git pull

It should update with the latest version from GitHub.

Further instructions will on the wiki at github.com/mattgibb/visualisation.

For the file converter, you will need to install:

CMake (cmake.org)
VTK (vtk.org)
Boost (www.boost.org)

To run tests, you will need to install:

Python (www.python.org)

FILE CONVERSION AND TRANSLATION
The file converters translate output from  popular cardiac file formats into VTK format, for viewing with e.g. ParaView. Once you've checked out the code, change into the 'converters/build' subdirectory and run:

ccmake ..

This will generate build files for you in an interactive way. If nothing goes wrong, you should be able simply to press 'c' for configure a couple of times, then 'g' for generate. The instructions are at the bottom of the screen anyway. You might need to tell it where VTK or Boost is installed if you've installed them in a non-standard location for your OS.

Once the makefiles are generated, just type make et voil√†! The tools are built. You'll find them in converters/build/bin. We hope they are straightforward to use, just run them with the '--help' option to find out how. If it's not clear, ask, then if you wouldn't mind, add instructions to the wiki or to this file for the next person :-)

SHARED LIBRARIES AND PLUGINS:
In order to enable all your ITK programs to read and write vox files, you need to point them towards your shiny new VoxIO plugin. Set the environment variable ITK_AUTOLOAD_PATH to the lib directory where you've built the converters, e.g.:

export ITK_AUTOLOAD_PATH=/path/to/this/project/converters/build/lib



RUNNING TESTS:
To run the tests, change into 'converters/build' and type 'make test'. All the tests should pass...
